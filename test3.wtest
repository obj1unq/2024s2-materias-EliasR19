import intento3.*
//COMENTAR VALIDAR DE ISNCRIBIR PARA TODOS LOS TEST ANTES DEL PUNTO 5 "COMPLETO..."
describe "punto 1" {        
    const pepe = new Estudiante()
    const matematica1 = new Materia(carrera = programacion)
    test "estudiante materia aprobada"{

        pepe.gestor().materiaAprobada(matematica1, 7)

        assert.equals([matematica1], listaAMaterias.materias(pepe.gestor().materiasAprobadas()))
    }

    test "inscribir carrera" {
        pepe.gestor().inscribirCarrera(programacion)

        assert.equals(#{programacion}, pepe.carreras())
    }
}

describe "punto 2"{
        const pepe = new Estudiante()
        const matematica1 = new Materia(carrera = programacion)
        const objetos1 = new Materia(carrera = programacion)
        const elementosProgram = new Materia(carrera = programacion)
        test "cantidad materias"{
            pepe.gestor().materiaAprobada(matematica1, 7)
            pepe.gestor().materiaAprobada(objetos1, 10)
            pepe.gestor().materiaAprobada(elementosProgram, 6)

            assert.equals(3, pepe.gestor().cantAprobadas())
        }

        test "promedio"{
            pepe.gestor().materiaAprobada(matematica1, 7)
            pepe.gestor().materiaAprobada(objetos1, 10)
            pepe.gestor().materiaAprobada(elementosProgram, 6)

            assert.equals(7.6, pepe.gestor().promedio().truncate(1))
        }

        test "tiene aprobada X materia"{
            pepe.gestor().materiaAprobada(matematica1, 7)
            pepe.gestor().materiaAprobada(objetos1, 10)
            pepe.gestor().materiaAprobada(elementosProgram, 6)

            assert.that(pepe.gestor().tieneAprobada(matematica1))
        }   
}

describe "punto 3"{
        const pepe = new Estudiante()
        const matematica1 = new Materia(carrera = programacion)
        const objetos1 = new Materia(carrera = programacion)

        


    test "validar aprobada"{
            pepe.gestor().materiaAprobada(matematica1, 7)

            assert.throwsException({pepe.gestor().materiaAprobada(matematica1, 8)})
            assert.doesNotThrowException({pepe.gestor().materiaAprobada(objetos1, 10)}) 

        }
}

describe "punto 4"{
    const pepe = new Estudiante()
        //PROGRAMACION
    const elemProg = new Materia(carrera = programacion)
    const mate1 = new Materia(carrera = programacion)
    const obj1 = new Materia(carrera = programacion)
    const obj2 = new Materia(carrera = programacion)
    const obj3 = new Materia(carrera = programacion)
    const trabajoFinal = new Materia(carrera = programacion)
    const baseDatos = new Materia(carrera = programacion)


        //MEDICINA
    const quimica = new Materia(carrera = medicina)
    const bio1 = new Materia(carrera = medicina)
    const bio2 = new Materia(carrera = medicina)
    const anatomiaGrl = new Materia(carrera = medicina)
    
    test "todas las materias de una carrera a la que esta inscripto"{
        pepe.gestor().inscribirCarrera(programacion)

        programacion.materias([elemProg, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos])
        medicina.materias([quimica, bio1, bio2, anatomiaGrl])

        pepe.gestor().inscribir(obj1)
        pepe.gestor().inscribir(elemProg)

        const materiasProg = #{elemProg, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos}

        assert.equals(materiasProg, pepe.gestor().materiasDeCarrerasInscripto())

    }
    test "todas las materias de las carreras a las que esta inscripto"{
        programacion.materias([elemProg, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos])
        medicina.materias([quimica, bio1, bio2, anatomiaGrl])

        pepe.gestor().inscribirCarrera(programacion)
        pepe.gestor().inscribirCarrera(medicina)

        pepe.gestor().inscribir(obj1)
        pepe.gestor().inscribir(elemProg)
        pepe.gestor().inscribir(quimica)


        const materiasProg = #{elemProg, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos,quimica, bio1, bio2, anatomiaGrl}

        assert.equals(materiasProg, pepe.gestor().mateirasDeCarrerasInscripto())

    }

}

describe "PUNTO 5"{
        const pepe = new Estudiante()
        //PROGRAMACION
    const elemProg = new Materia(carrera = programacion)
    const mate1 = new Materia(carrera = programacion)
    const obj1 = new Materia(carrera = programacion)
    const obj2 = new Materia(carrera = programacion)
    const obj3 = new Materia(carrera = programacion)
    const trabajoFinal = new Materia(carrera = programacion)
    const baseDatos = new Materia(carrera = programacion)


        //MEDICINA
    const quimica = new Materia(carrera = medicina)
    const bio1 = new Materia(carrera = medicina)
    const bio2 = new Materia(carrera = medicina)
    const anatomiaGrl = new Materia(carrera = medicina)
    test "La materia esta en una carrera que esta cursando"{
        programacion.materias([elemProg, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos])
        medicina.materias([quimica, bio1, bio2, anatomiaGrl])

        pepe.gestor().inscribirCarrera(programacion)
        pepe.gestor().inscribir(obj1)
        //pepe.gestor().inscribir(elemProg)
        //pepe.gestor().inscribir(quimica)


        assert.that(pepe.gestor().materiaPerteneceACarrera(elemProg))
    }

    test "La materia esta aprobada"{
        pepe.gestor().inscribir(obj1)
        pepe.gestor().materiaAprobada(obj2, 8)


        assert.that(pepe.gestor().tieneAprobada(obj2))
    }

    test "Esta inscripto en materia"{
         pepe.gestor().inscribirCarrera(programacion)
         pepe.gestor().inscribir(obj1)
        pepe.gestor().materiaAprobada(obj2, 8)

        assert.that(pepe.gestor().estaInscriptoEn(obj1))
    }

    test "Tiene aprobada las correlativas"{
        obj2.correlativas([obj1, mate1])
        pepe.gestor().materiaAprobada(obj1, 8)
        pepe.gestor().materiaAprobada(mate1, 8)


        assert.equals([obj1, mate1], obj2.correlativas())

        assert.that(pepe.gestor().tieneCorrelativaDe(obj2))

    }

    test "COMPLETO. Sin fallos en el validar"{
        //materias de carrera
        programacion.materias([elemProg, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos])
        pepe.gestor().inscribirCarrera(programacion)

       //Correlativas
        obj2.correlativas([obj1, mate1])

        //correlativas aprobadas
        pepe.gestor().materiaAprobada(obj1, 8)
        pepe.gestor().materiaAprobada(mate1, 8)

        assert.doesNotThrowException({pepe.gestor().inscribir(obj2)})
    }

    test "Falla porque no tiene correlativas"{
        //materias de carrera
        programacion.materias([elemProg, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos])
        pepe.gestor().inscribirCarrera(programacion)

       //Correlativas
        obj2.correlativas([obj1, mate1])

        //correlativas aprobadas
        pepe.gestor().materiaAprobada(obj1, 8)

         assert.throwsException({pepe.gestor().inscribir(obj2)})
    }
}

describe "PUNTO 6"{
    const pepe = new Estudiante()
        //PROGRAMACION
    const elemProg = new Materia(carrera = programacion)
    const mate1 = new Materia(carrera = programacion)
    const obj1 = new Materia(carrera = programacion)
    const obj2 = new Materia(carrera = programacion)
    const obj3 = new Materia(carrera = programacion)
    const trabajoFinal = new Materia(carrera = programacion)
    const baseDatos = new Materia(carrera = programacion)

    test "Inscribir con validar"{
        //materias de carrera
        programacion.materias([elemProg, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos])
        pepe.gestor().inscribirCarrera(programacion)

       //Correlativas
        obj2.correlativas([obj1, mate1])

        //correlativas aprobadas
        pepe.gestor().materiaAprobada(obj1, 8)
        pepe.gestor().materiaAprobada(mate1, 8)

        assert.doesNotThrowException({pepe.gestor().inscribir(obj2)})
        pepe.gestor().inscribir(elemProg)


        const materiasInscipto = listaAMaterias.materias(pepe.gestor().materiasInscriptoActual())

        assert.equals([obj2, elemProg], materiasInscipto)
    }

    const manuela = new Estudiante()
    test "Hay cupos"{
        obj1.cupo(3)
        programacion.materias([elemProg, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos])

        pepe.gestor().inscribirCarrera(programacion)
        manuela.gestor().inscribirCarrera(programacion)

        pepe.gestor().inscribir(obj1)
        manuela.gestor().inscribir(obj1)

        assert.equals([pepe, manuela], obj1.inscriptos())
    }

    test "NO Hay cupos, va a lista de espera"{
        obj1.cupo(1)
        programacion.materias([elemProg, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos])

        pepe.gestor().inscribirCarrera(programacion)
        manuela.gestor().inscribirCarrera(programacion)

        pepe.gestor().inscribir(obj1)
        //manuela.gestor().inscribir(obj1)

        assert.equals([pepe], obj1.inscriptos())
        
        assert.throwsException({ manuela.gestor().inscribir(obj1) })
        assert.equals([manuela], obj1.listaEspera())


    }
    
}


//TEORIA (pasar a papel)
//en la super clase se tiene un metodo que llama a otros métodos, y ese metodo todos lo heredan y nadie lo modifica
//template method, es un metodo tipo funcion que tiene partes adentro que se van cambiando en otrs lados. y la formula del metodo es la misma, pero cambias datos.
//Patrón de diseño: template method -> una método se define como subtareas a, b oi más y luego las subclases redefinen lo que necesiten pero no el método que los utiliza
//SI hay "un cachito que cambia" en ves de reescribir todo se aísla dicho segmento a una subtarea para solo cambiar / sobrescribir eso.