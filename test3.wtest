import intento3.*

describe "punto 1" {
    test "estudiante materia aprobada"{
        const pepe = new Estudiante()
        const matematica1 = new Materia(carrera = programacion)
        pepe.gestor().materiaAprobada(matematica1, 7)

        assert.equals([matematica1], listaAMaterias.materias(pepe.gestor().materiasAprobadas()))
    }
}

describe "punto 2"{
        const pepe = new Estudiante()
        const matematica1 = new Materia(carrera = programacion)
        const objetos1 = new Materia(carrera = programacion)
        const elementosProgram = new Materia(carrera = programacion)
        test "cantidad materias"{
            pepe.gestor().materiaAprobada(matematica1, 7)
            pepe.gestor().materiaAprobada(objetos1, 10)
            pepe.gestor().materiaAprobada(elementosProgram, 6)

            assert.equals(3, pepe.gestor().cantAprobadas())
        }

        test "promedio"{
            pepe.gestor().materiaAprobada(matematica1, 7)
            pepe.gestor().materiaAprobada(objetos1, 10)
            pepe.gestor().materiaAprobada(elementosProgram, 6)

            assert.equals(7.6, pepe.gestor().promedio().truncate(1))
        }

        test "tiene aprobada X materia"{
            pepe.gestor().materiaAprobada(matematica1, 7)
            pepe.gestor().materiaAprobada(objetos1, 10)
            pepe.gestor().materiaAprobada(elementosProgram, 6)

            assert.that(pepe.gestor().tieneAprobada(matematica1))
        }   
}

describe "punto 3"{
        const pepe = new Estudiante()
        const matematica1 = new Materia(carrera = programacion)
        const objetos1 = new Materia(carrera = programacion)

        


    test "validar aprobada"{
            pepe.gestor().materiaAprobada(matematica1, 7)

            assert.throwsException({pepe.gestor().materiaAprobada(matematica1, 8)})
            assert.doesNotThrowException({pepe.gestor().materiaAprobada(objetos1, 10)}) 

        }
}

describe "punto 4"{
    const pepe = new Estudiante()
        //PROGRAMACION
    const elemProf = new Materia(carrera = programacion)
    const mate1 = new Materia(carrera = programacion)
    const obj1 = new Materia(carrera = programacion)
    const obj2 = new Materia(carrera = programacion)
    const obj3 = new Materia(carrera = programacion)
    const trabajoFinal = new Materia(carrera = programacion)
    const baseDatos = new Materia(carrera = programacion)


        //MEDICINA
    const quimica = new Materia(carrera = medicina)
    const bio1 = new Materia(carrera = medicina)
    const bio2 = new Materia(carrera = medicina)
    const anatomiaGrl = new Materia(carrera = medicina)
    
    test "todas las materias de una carrera a la que esta inscripto"{
        programacion.materias([elemProf, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos])
        medicina.materias([quimica, bio1, bio2, anatomiaGrl])

        pepe.gestor().inscribir(obj1)
        pepe.gestor().inscribir(elemProf)

        const materiasProg = [elemProf, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos]

        assert.equals(materiasProg, pepe.gestor().mateirasDeCarrerasInscripto())

    }
    test "todas las materias de las carreras a las que esta inscripto"{
        programacion.materias([elemProf, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos])
        medicina.materias([quimica, bio1, bio2, anatomiaGrl])

        pepe.gestor().inscribir(obj1)
        pepe.gestor().inscribir(elemProf)
        pepe.gestor().inscribir(quimica)


        const materiasProg = #{elemProf, mate1, obj1, obj2, obj3, trabajoFinal, baseDatos,quimica, bio1, bio2, anatomiaGrl}

        assert.equals(materiasProg, pepe.gestor().mateirasDeCarrerasInscripto())

    }

    test"x"{

        pepe.gestor().materiaAprobada(obj1, 10)
        
        pepe.gestor().materiaAprobada(mate1, 10)
        pepe.gestor().materiaAprobada(bio1, 10)

       // const materiasPepe = listaAMaterias.materias(pepe.gestor().materiasAprobadas())
        //assert.equals([obj1], materiasPepe)

        const carrerasPepe = listaACarreras.carreras(pepe.gestor().materiasAprobadas())
        assert.equals([programacion, medicina], carrerasPepe)
    }
}




//TEORIA (pasar a papel)
//en la super clase se tiene un metodo que llama a otros métodos, y ese metodo todos lo heredan y nadie lo modifica
//template method, es un metodo tipo funcion que tiene partes adentro que se van cambiando en otrs lados. y la formula del metodo es la misma, pero cambias datos.
//Patrón de diseño: template method -> una método se define como subtareas a, b oi más y luego las subclases redefinen lo que necesiten pero no el método que los utiliza
//SI hay "un cachito que cambia" en ves de reescribir todo se aísla dicho segmento a una subtarea para solo cambiar / sobrescribir eso.